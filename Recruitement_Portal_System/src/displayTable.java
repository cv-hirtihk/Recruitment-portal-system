import java.awt.Color;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.sql.SQLException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author HIRTIH KUMAR C V
 */
public class displayTable extends javax.swing.JFrame {

    /**
     * Creates new form displayTable
     */
    public displayTable() {
        initComponents();
        mainTable.setForeground(Color.BLUE);
    }

    private void populateTable(String SelectSQL , String data[][], String Header[]) throws SQLException{

        data = access.TableData(SelectSQL, Header);
        mainTable.setModel(new javax.swing.table.DefaultTableModel(data , Header));
        
        this.pack();
        
    }
    protected void receiveData(String SelectSQL , String ... Header) throws SQLException{
        this.SelectSQL = SelectSQL;
        
        this.setTitle(SelectSQL);
        if(SelectSQL.equals("Edit") || SelectSQL.equals("Delete")){
            EditDelete_Button.setText(SelectSQL);
            EditDelete_Button.setVisible(true);
        }else if(SelectSQL.equals("positionView")){
            EditDelete_Button.setText("Add Resume");
            EditDelete_Button.setVisible(true);
        }else if(SelectSQL.equals("Recruitement View") || SelectSQL.equals("Management Approval")){
            EditDelete_Button.setText("Edit");
            EditDelete_Button.setVisible(true);
        }
        populateTable(SelectSQL , data , Header);
        
    }
    
    protected String chooseFilePath(boolean trigger){
        String path = "";
        if(trigger){
            JFileChooser choose = new JFileChooser();
            choose.showOpenDialog(null);
            File f = choose.getSelectedFile();
            path = f.getAbsolutePath().endsWith(".pdf") ? f.getAbsolutePath() : "false";
        }
        return path; 
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        mainTable = new javax.swing.JTable();
        EditDelete_Button = new javax.swing.JButton();
        CancelClose_Button = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        mainTable.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N
        mainTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6", "Title 7", "Title 8", "Title 9", "Title 10", "Title 11"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        mainTable.setName(""); // NOI18N
        mainTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        mainTable.getTableHeader().setReorderingAllowed(false);
        mainTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mainTableMouseClicked(evt);
            }
        });
        mainTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                mainTableKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(mainTable);

        EditDelete_Button.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N
        EditDelete_Button.setText("jButton1");
        EditDelete_Button.setVisible(false);
        EditDelete_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditDelete_ButtonActionPerformed(evt);
            }
        });

        CancelClose_Button.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N
        CancelClose_Button.setText("Cancel");
        CancelClose_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelClose_ButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1126, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(EditDelete_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(CancelClose_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(EditDelete_Button)
                    .addComponent(CancelClose_Button))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CancelClose_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelClose_ButtonActionPerformed
  
        this.dispose();
        
    }//GEN-LAST:event_CancelClose_ButtonActionPerformed

    private void EditDelete_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditDelete_ButtonActionPerformed
        int selectedRowValue;
        String Message , sql;
        String tableArray[] = new String[11];
        try{
            if(evt.getActionCommand().equals("Edit") && !SelectSQL.equals("Recruitement View")){
                if(mainTable.getValueAt(row_select, 9).equals("In progress") || mainTable.getValueAt(row_select, 9).equals("Pending Approval")){// to be changed
                    if(!SelectSQL.equals("Management Approval")){
                        for(int i = 0 ; i < 11 ; i++){
                            mainTable.setValueAt(mainTable.getValueAt(row_select, i) , row_select , i);
                        }
                        for(int j = 0 ; j < 11 ; j++){
                            tableArray[j] = String.valueOf(mainTable.getValueAt(row_select, j));
                        }
                    }
                    sql  = SelectSQL.equals("Management Approval") ? "UPDATE position_request_table SET request_status = '"+mainTable.getValueAt(row_select, 9)+"' WHERE request_id = "+mainTable.getValueAt(row_select, 0)+";" :
                    "UPDATE position_master_table SET department = '"+tableArray[1]+"',job_title = '"+tableArray[2]+"',experience = "+tableArray[3]+",qualifications = '"+tableArray[4]+"',skills = '"+tableArray[5]+"',job_description = '"+tableArray[6]+"',position_count = "+tableArray[7]+" WHERE position_id = "+tableArray[0]+";";
                    access.UpdateDeleteEdit(sql);
                    if(SelectSQL.equals("Management Approval")){
                        mainTable.setValueAt(mainTable.getValueAt(row_select, 9) , row_select , 9);
                    }
                    
                    JOptionPane.showMessageDialog(null , "Changes updated to database successfully!");
                }else{
                    JOptionPane.showMessageDialog(null , "position_status is already in status : Deleted");
                }
            }
            if(SelectSQL.equals("Recruitement View")){
                
                mainTable.setValueAt(mainTable.getValueAt(row_select, 5) , row_select , 5);
                
                sql = "UPDATE recruitement_master_table SET recruitement_status = '"+mainTable.getValueAt(row_select, 5)+"' WHERE sr_no = "+mainTable.getValueAt(row_select, 0)+" AND position_id = "+mainTable.getValueAt(row_select, 1)+"";
                access.UpdateDeleteEdit(sql);
                Message = "Changes made successfully! recruitement_status : '"+mainTable.getValueAt(row_select, 5)+"' position_id : "+mainTable.getValueAt(row_select, 1)+"";
                JOptionPane.showMessageDialog(null,Message );
            }
            if(evt.getActionCommand().equals("Delete")){
                if(row_select >= 0 && mainTable.getSelectedRowCount() == 1){        
                    selectedRowValue = Integer.parseInt(String.valueOf(mainTable.getValueAt(row_select , 0)));
                    tracker = access.dbSetDelete(selectedRowValue);
                    if(tracker){
                        mainTable.setValueAt("Deleted", row_select , 9);
                    }
                }
                else{
                    Message = "Select 'one' row to "+ evt.getActionCommand() + "";
                    JOptionPane.showMessageDialog(null, Message);
                }
            }
            if(evt.getActionCommand().equals("Add Resume")){
                if(mainTable.getSelectedRowCount() != 1){
                    JOptionPane.showMessageDialog(null, "Select a row to Add Resume");
                }
                else{
                    String path , recruitement_status = "reffered";
                    int index;
                    String file = "";
                    path = chooseFilePath(true);
                    if(path != "false"){
                        System.out.println("path : " + path);
                        if(row_select >= 0 && mainTable.getSelectedRowCount() == 1){ // By default RowCount == 1 , RowCount is checked again to avoid errors
                            int position_id =  Integer.parseInt((String) mainTable.getValueAt(row_select , 0));
                            String job_title = String.valueOf(mainTable.getValueAt(row_select , 2));
                            String user_id = String.valueOf(mainTable.getValueAt(row_select , 8));

                            File pdfFile = new File(path);
                            byte[] pdfData = new byte[(int) pdfFile.length()];
                            DataInputStream DIS = new DataInputStream(new FileInputStream(pdfFile));
                            DIS.readFully(pdfData);  // read from file into byte[] array
                            DIS.close();

                            String result[] = access.InsertNewAccountData(position_id,job_title,pdfData,user_id,recruitement_status,"Add Resume").split("-");
                            System.out.println("result : " + java.util.Arrays.toString(result));
                            Message = "Resume uploaded successfully! Recruitement_status : "+result[1]+"";
                            JOptionPane.showMessageDialog(null, Message);
                        }
                    }
                    else{
                        JOptionPane.showMessageDialog(null, "Upload a 'PDF' file");
                    }
                }
            }
        }catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "SQLException occured");
        }catch(Exception ex){
            System.out.println("ex : " + ex);
            JOptionPane.showMessageDialog(null, "Exception Error occured");
        }
    }//GEN-LAST:event_EditDelete_ButtonActionPerformed


    private void mainTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mainTableKeyPressed

        if((!EditDelete_Button.getText().equals("Edit") || (mainTable.getSelectedColumn() == 0 || mainTable.getSelectedColumn() == 8 || mainTable.getSelectedColumn() == 9 || mainTable.getSelectedColumn() == 10)) && !SelectSQL.equals("Recruitement View")){
            evt.consume();
        }if(SelectSQL.equals("Management Approval") && mainTable.getSelectedColumn() != 9 ){
            evt.consume();
        }if(EditDelete_Button.getText().equals("Add Resume")){
            evt.consume();
        }
        
    }//GEN-LAST:event_mainTableKeyPressed

    private void mainTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mainTableMouseClicked
        
        tableclick = mainTable.isEditing();
        /*if(evt.getClickCount() >= 1){
            
            if(mainTable.getSelectedColumn() == 0 || mainTable.getSelectedColumn() == 8 || mainTable.getSelectedColumn() == 9 || mainTable.getSelectedColumn() == 10 && !SelectSQL.equals("Management Approval")){
                    JOptionPane.showMessageDialog(null, "Cannot edit Special columns");
                }
            System.out.println("clicked");
            if(EditDelete_Button.getText().equals("Edit") && !SelectSQL.equals("Recruitement View")){
                if((!EditDelete_Button.getText().equals("Edit") && !SelectSQL.equals("Management Approval")) && tableclick == false){
                    JOptionPane.showMessageDialog(null, "Cannot edit Columns");
                }
                if(EditDelete_Button.getText().equals("Edit")){
                    row_select = mainTable.getSelectedRow();
                }
                else if((mainTable.getSelectedColumn() == 0 || mainTable.getSelectedColumn() == 8 || mainTable.getSelectedColumn() == 9 || mainTable.getSelectedColumn() == 10) && EditDelete_Button.getText().equals("Edit")){
                    JOptionPane.showMessageDialog(null, "Cannot edit Special columns");
                }
            }
            
            if(EditDelete_Button.getText().equals("Delete")){
                if(mainTable.getSelectedColumn() != -1){
                    //evt.consume();
                    JOptionPane.showMessageDialog(null, "Cannot edit Columns");
                }
                else{
                    row_select = mainTable.getSelectedRow();
                }
            }
           
            if(SelectSQL.equals("Management Approval") && !EditDelete_Button.getText().equals("Add Resume")){// to be confirmed and changed
                if(mainTable.getSelectedColumn() != 9 && SelectSQL.equals("Management Approval")){
                    JOptionPane.showMessageDialog(null, "Cannot edit Special columns");
                }
                if(mainTable.getSelectedColumn() == 9 && SelectSQL.equals("Management Approval")){
                    row_select = mainTable.getSelectedRow();
                }
                System.out.println("Add Resume : " + row_select);
            }
            
            if(EditDelete_Button.getText().equals("Add Resume")){
                if(mainTable.getSelectedColumn() != -1){
                    JOptionPane.showMessageDialog(null, "Cannot edit Columns");
                }
                if(EditDelete_Button.getText().equals("Add Resume") && mainTable.getSelectedRowCount() == 1 ){
                   row_select = mainTable.getSelectedRow();
                   System.out.println("row_select Edit: " + row_select);
                }
                System.out.println("mainTable.getSelectedRowCount() : " + mainTable.getSelectedRowCount());                
            }
            
            
            if(SelectSQL.equals("Recruitement View")){
                if(mainTable.getSelectedColumn() != 5){
                        JOptionPane.showMessageDialog(null, "Cannot edit Special columns");
                }
                if(mainTable.getSelectedColumn() == 5){
                    row_select = mainTable.getSelectedRow();
                    System.out.println("row_select Edit: " + row_select);
                }                
            }
        }*/
    }//GEN-LAST:event_mainTableMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the 'Windows' look and feel */
        try {
            javax.swing.UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            JOptionPane.showMessageDialog(null , "error while setting UI");
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new displayTable().setVisible(true);
            }
        });
    }
    
    
    
    
    private int row_select = 0 , count = 0;;
    private DataBaseHandler access = new DataBaseHandler();
    private String data[][] , SelectSQL;
    protected String UIreference_user_id;
    private boolean tracker , tableclick;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CancelClose_Button;
    private javax.swing.JButton EditDelete_Button;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable mainTable;
    // End of variables declaration//GEN-END:variables
}
